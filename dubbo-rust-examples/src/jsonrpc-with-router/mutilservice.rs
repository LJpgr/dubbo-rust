/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// this file should be auto generated by crate dubbo-rust-build (WIP) , now it is hand-write : )

#![allow(dead_code)]

use async_trait::async_trait;
use serde::{Deserialize, Serialize};
use std::{future::Future, pin::Pin};

pub type StdError = Box<(dyn std::error::Error + Send + Sync + 'static)>;
pub type BoxFuture<R, E> = Pin<Box<(dyn Future<Output = Result<R, E>> + Send + 'static)>>;

#[derive(Debug, Deserialize, Serialize)]
pub struct MutilReq {
    pub numbers: Vec<i32>,
}

pub type MutilResp = i32;

#[async_trait]
pub trait MutilService {
    async fn mutil(&self, req: MutilReq) -> Result<MutilResp, StdError>;
}

pub mod mutil_service {
    use std::{sync::Arc, task::Poll};

    use dubbo_rust_protocol::{
        jsonrpc::{Request, Response},
        NamedService,
    };

    use super::{BoxFuture, MutilReq, MutilService, StdError};

    type _Inner<T> = Arc<T>;

    pub struct MutilServer<T: MutilService> {
        inner: _Inner<T>,
    }

    impl<T: MutilService> Clone for MutilServer<T> {
        fn clone(&self) -> Self {
            Self {
                inner: self.inner.clone(),
            }
        }
    }

    impl<T: MutilService> MutilServer<T> {
        pub fn new(service: T) -> Self {
            Self {
                inner: Arc::new(service),
            }
        }
    }

    impl<T: MutilService> NamedService for MutilServer<T> {
        const SERVICE_NAME: &'static str = "MutilService";
    }

    impl<T> tower::Service<Request> for MutilServer<T>
    where
        T: MutilService + Send + Sync + 'static,
    {
        type Response = Response;

        type Error = StdError;

        type Future = BoxFuture<Self::Response, Self::Error>;

        fn poll_ready(
            &mut self,
            _: &mut std::task::Context<'_>,
        ) -> std::task::Poll<Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }

        fn call(&mut self, req: Request) -> Self::Future {
            let method_not_found = |req: Request| {
                Box::pin(async move {
                    let error = dubbo_rust_protocol::jsonrpc::Error {
                        code: -32601,
                        message: "Method not found".to_string(),
                    };

                    Ok(Response::from_request_error(&req, error))
                })
            };

            if req.header.method.is_none() {
                return method_not_found(req);
            }

            let inner_service = self.inner.clone();
            match req.header.method.as_ref().unwrap().as_str() {
                "mutil" => Box::pin(async move {
                    let params: MutilReq = serde_json::from_value(req.params.clone())?;
                    let result = inner_service.mutil(params).await?;
                    Ok(Response::from_request(&req, result)?)
                }),
                _ => method_not_found(req),
            }
        }
    }
}

pub mod mutil_client {
    use std::net::SocketAddr;

    use super::{MutilReq, MutilResp, StdError};
    use dubbo_rust_protocol::jsonrpc::Request as JsonRpcRequest;
    use dubbo_rust_protocol::jsonrpc::Response as JsonRpcResponse;
    use hyper::body::HttpBody;
    use hyper::client::HttpConnector;

    pub struct MutilClient {
        addr: SocketAddr,
        http_client: hyper::Client<HttpConnector>,
    }

    impl MutilClient {
        pub fn new(addr: &SocketAddr) -> Result<Self, StdError> {
            let client = hyper::Client::new();
            Ok(Self {
                addr: addr.clone(),
                http_client: client,
            })
        }

        pub async fn mutil(&mut self, req: MutilReq) -> Result<MutilResp, StdError> {
            let req = JsonRpcRequest::new("mutil", req)?;
            let req_str = req.to_string()?;
            let http_request = hyper::Request::builder()
                .method("POST")
                .uri(format!("http://{}/MutilService", self.addr.to_string()))
                .body(hyper::Body::from(req_str))
                .expect("request builder");

            let mut resp = self.http_client.request(http_request).await?;

            let body = resp.data().await;
            if body.is_none() {
                return Err("body empty".into());
            }
            let body = body.unwrap()?;
            let jsonrpc_resp = JsonRpcResponse::from_slice(&body.to_vec())?;

            Ok(jsonrpc_resp.get_body()?)
        }
    }
}
